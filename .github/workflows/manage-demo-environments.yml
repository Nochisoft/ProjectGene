# This workflow is a starting point to integrate with the Azure SG/RG management logic
# It currently starts the creation of a new Repository (based off a repository template) 
# when a Project Card (e.g. Issue inside of a Project Board) is moved to the "In progress" column.
# A "project" is referred to as a Demo Environment to remove confusion with GitHub's Project Boards
# More info: https://github.com/lnochili/ProjectGene/issues/1

name: Manage Demo Environments

on:
  project_card

# TODO check secrets.ACTION_PAT

env:
  COL_TODO: 'To do'
  COL_INPG: 'In Progress'
  COL_DONE: 'Created'
  ORG_NAME: ${{ github.repository_owner }}

jobs:
  update-project:
    if: github.event.action == 'moved'
    runs-on: [ubuntu-latest]
  
    steps:
      - name: 'Checkout Github Action'
        uses: actions/checkout@main
      - uses: actions/github-script@v2
        id: repo_crud
        name: Create or Delete Repository
        # This is to ensure the project card being moved is an "issue" and not a "note"
        # TODO undo skipping
        if: contains(github.event.project_card.content_url, 'issues/')
        #if: ${{ false }}
        with:
          github-token: ${{ secrets.ACTION_PAT }}
          script: |
            const { COL_TODO, COL_INPG, COL_DONE, ORG_NAME} = process.env;
            const {column_id, content_url } = context.payload.project_card;
                    
            // Retrieve column info
            const { data: { name: column_name }}  = await github.projects.getColumn({
              column_id,
            });

            // Get issue details from the project card
            let { data : { labels, body, state, title, number, user }} = await github.request(`GET ${content_url}`);
                        
            switch (column_name) {
              case COL_TODO:
                console.log("A new Issue was added to the Project board. Nothing to do here!");
                break;
              case COL_INPG:
                console.log("A new request for a demo environment was approved. Initiating sequence...");
                // TODO create repository from the specified template found in the issue
                const template_repo = 'webapp-template';

                const new_repo_name = `${title}-${Math.random().toString(36).substring(7)}`;
                console.log(`Attempting to create ${new_repo_name} for ${user.login}`);

                let repo_res = await github.repos.createUsingTemplate({
                  template_owner: ORG_NAME,
                  template_repo,
                  name: new_repo_name,
                  owner: ORG_NAME
                });
                
                
                if (repo_res.status == 201) {
                  // Create default Project Board inside new repo
                  const new_project_res = github.projects.createForRepo({
                    owner: ORG_NAME,
                    repo: repo_res.data.name,
                    name: 'Project Board',
                  });
                  
            
                  core.setOutput('new_repo_full_name', repo_res.data.full_name);
                  core.setOutput('new_repo_name', repo_res.data.name);
                  
                  console.log("New repository created successfully. Posting details in an issue.");
                  // TODO extract issue posting to separate step, so that we can use the GITHUB_TOKEN 
                  // and post the reply as GitHub-Actions user
                  
                  const comment_body = `
              ## Created new project 
              
              The repository [${repo_res.data.full_name}](${repo_res.data.html_url}) has been created (using the template ${ORG_NAME}/${template_repo}) and is now available.

              ## Next steps
              - [Invite users](${repo_res.data.html_url}/settings/access)
              - [Rename repo](${repo_res.data.html_url}/settings)
              
              ----

                  NEW_REPO_ID=${repo_res.data.id}
                  NEW_REPO_NAME=${repo_res.data.full_name}
                  `;

                  const comment_res = await github.issues.createComment({
                    issue_number: number, 
                    owner: user.login, 
                    repo: context.repo.repo,
                    body: comment_body
                  });

                } else {
                  console.error(`Could not create repo ${new_repo_full_name}`);
                }
                
                break;
              case COL_DONE:
                console.log("Close project");
                
                const comments_res = await github.issues.listComments({
                    issue_number: number, 
                    owner: user.login, 
                    repo: context.repo.repo,
                });
                  

                if (comments_res.data.length > 0) {
                  console.log("Last issue comment");
                  const last_comment = comments_res.data.splice(-1, 1);
                  console.log(last_comment);
                  const repo_id_regex = /NEW_REPO_ID=([^" ]+)/gm;
                  const repo_name_regex = /NEW_REPO_NAME=([^" ]+)/gm;

                  console.log(
                    "Repo ID",
                    repo_id_regex.exec(last_comment.body)[1].trim()
                  );
                  console.log(
                    "Repo name",
                    repo_name_regex.exec(last_comment.body)[1].trim()
                  );
                }
                
                break;
              default:
                console.log(`Column ${column_name} not found in Project Board. Skipping...`); 
                break;
            }
      - name: azure authentication
        if: ${{ steps.repo_crud.outputs.new_repo_name }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create Azure ResourceGroup
        if: ${{ steps.repo_crud.outputs.new_repo_name }}
        uses: azure/CLI@v1
        id: azure
        with:
          inlineScript: |
            resource_group_name=${{ steps.repo_crud.outputs.new_repo_name }}            
            azure_region="southIndia"
            #account details in json format
            accjson=$(az account show)
            # resource group details in json format
            rgjson=$(az group create --name  $resource_group_name --location $azure_region )
            # echo for debugging
            # echo "$accjson"
            # echo "$rgjson"
            # get the subscription ID
            subscriptionId=$(echo "$accjson" | jq '.id')
            tenantId=$(echo "$accjson" | jq '.tenantId')
            # echo for debugging
            # echo "$subscriptionId"
            # echo "$tenantId"
            # get the resource group id (remove the quotes - raw) and location
            rgid=$(echo "$rgjson" | jq '.id' -r)
            rgloc=$(echo "$rgjson" | jq '.location')
            # echo for debugging
            # echo "$rgid"
            # echo "$rgloc"
            # create the Service Principal
            spn_name=$resource_group_name"-spn"
            spjson=$(az ad sp create-for-rbac --name $spn_name --role Contributor --scopes $rgid)
            
            # get the clientId and
            clientId=$(echo "$spjson" | jq '.appId' -r)
            clientSecret=$(echo "$spjson" | jq '.password' -r)
            
            # echo for debugging
            # echo "$clientId"
            # echo "$clientSecret"
            
            
            githubjson=$(jq --arg key0   'subscriptionId' \
                --arg value0 $subscriptionId \
                --arg key1   'tenantId' \
                --arg value1 $tenantId \
                --arg key2   'clientId' \
                --arg value2 $clientId \
                --arg key3   'clientSecret' \
                --arg value3 $clientSecret \
                --arg key4   'activeDirectoryEndpointUrl' \
                --arg value4 'https://login.microsoftonline.com' \
                --arg key5   'resourceManagerEndpointUrl' \
                --arg value5 'https://management.azure.com/' \
                --arg key6   'activeDirectoryGraphResourceId' \
                --arg value6 'https://graph.windows.net/' \
                --arg key7   'sqlManagementEndpointUrl' \
                --arg value7 'https://management.core.windows.net:8443/' \
                --arg key8   'galleryEndpointUrl' \
                --arg value8 'https://gallery.azure.com/' \
                --arg key9   'managementEndpointUrl' \
                --arg value9 'https://management.core.windows.net/' \
                '. | .[$key0]=$value0 | .[$key1]=$value1 | .[$key2]=$value2 | .[$key3]=$value3 | .[$key4]=$value4 | .[$key5]=$value5 | .[$key6]=$value6 | .[$key7]=$value7 | .[$key8]=$value8 | .[$key9]=$value9'  <<<'{}')
                     
            # push the spn to Azure keyvault
            # echo $githubjson
            # echo $githubjson | base64
            encodedJson=$(echo -n $githubjson | base64)
            # echo $encodedJson
            echo "::set-output name=azure_credentials::$encodedJson"
            az keyvault secret set -n $spn_name --vault-name kv-projectgene  --value "$githubjson" 
      - name: Provision secret
        if: ${{ steps.repo_crud.outputs.new_repo_name }}
        uses: pierluigi/repository-secret-javascript-action@main
        with:
          github-token: ${{ secrets.ORG_SECRETS_PAT }}
          repository: ${{ steps.repo_crud.outputs.new_repo_full_name }}
          secret-name: AZURE_CREDENTIALS
          secret-value: ${{ steps.azure.outputs.azure_credentials }}
