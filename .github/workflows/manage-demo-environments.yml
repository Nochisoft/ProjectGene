# This workflow is a starting point to integrate with the Azure SG/RG management logic
# It currently starts the creation of a new Repository (based off a repository template) 
# when a Project Card (e.g. Issue inside of a Project Board) is moved to the "In progress" column.
# A "project" is referred to as a Demo Environment to remove confusion with GitHub's Project Boards
# More info: https://github.com/lnochili/ProjectGene/issues/1

name: Manage Demo Environments

on:
  project_card

# TODO check secrets.ACTION_PAT

env:
  COL_TODO: 'To do'
  COL_INPG: 'In Progress'
  COL_DONE: 'Created'
  ORG_NAME: ${{ github.repository_owner }}
jobs:
  update-project:
    if: github.event.action == 'moved'
    runs-on: [ubuntu-latest]
  
    steps:
      - uses: actions/github-script@v2
        name: Process request for Demo Environment
        # This is to ensure the project card being moved is an "issue" and not a "note"
        if: contains(github.event.project_card.content_url, 'issues/')
        with:
          github-token: ${{ secrets.ACTION_PAT }}
          script: |
            const { COL_TODO, COL_INPG, COL_DONE, ORG_NAME} = process.env;
            const {column_id, content_url } = context.payload.project_card;
                    
            // Retrieve column info
            const { data: { name: column_name }}  = await github.projects.getColumn({
              column_id,
            });

            // Get issue details from the project card
            let { data : { labels, body, state, title, number, user }} = await github.request(`GET ${content_url}`);
            
            
            
            switch (column_name) {
              case COL_TODO:
                console.log("A new Issue was added to the Project board. Nothing to do here!");
                break;
              case COL_INPG:
                console.log("A new request for a demo environment was approved. Initiating sequence...");
                // TODO create repository from the specified template found in the issue
                const template_repo = 'webapp-template';

                const new_repo_name = `${template_repo}-${Math.random().toString(36).substring(7)}`;
                console.log(`Attempting to create ${new_repo_name} for ${user.login}`);

                let res = await github.repos.createUsingTemplate({
                  template_owner: ORG_NAME,
                  template_repo,
                  name: new_repo_name,
                  owner: ORG_NAME
                });
                
                
                if (res.status == 201) {
                  console.log("New repository created successfully. Posting details in an issue.");

                  const comment_body = `
              ## Created new project 
              
              The repository [${res.data.full_name}](${res.data.html_url}) has been created (using the template ${template_owner}/${template_repo}) and is now available.

              ## Next steps
              - [Invite users](${res.data.html_url}/settings/access)
              - [Rename repo](${res.data.html_url}/settings)
              
              ----

                  NEW_REPO_ID=${res.data.id}
                  NEW_REPO_NAME=${res.data.full_name}
                  `;

                  const comment_res = github.issues.createComment({
                    issue_number: number, 
                    owner: user.login, 
                    repo: context.repo.repo,
                    body: comment_body
                  });

                } else {
                  console.error(`Could not create repo ${new_repo_name} for ${user.login}`);
                }
                
                break;
              case COL_DONE:
                console.log("Close project");
                break;
              default:
                console.log(`Column ${column_name} not present. Skipping...`); 
                break;
            }
